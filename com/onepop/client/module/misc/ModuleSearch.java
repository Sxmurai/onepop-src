//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\aesthetical\Documents\Development\Tools\Minecraft-Clients\1.12.2 mappings"!

// 
// Decompiled by Procyon v0.6-prerelease
// 

package com.onepop.client.module.misc;

import com.onepop.api.util.math.PositionUtil;
import net.minecraft.util.math.BlockPos;
import java.time.LocalTime;
import net.minecraft.entity.boss.EntityWither;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.Entity;
import java.util.Iterator;
import com.onepop.api.util.chat.ChatUtil;
import com.onepop.api.util.world.BlockUtil;
import net.minecraft.tileentity.TileEntity;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;
import com.onepop.client.event.client.RunTickEvent;
import com.onepop.api.util.client.NullUtil;
import java.io.IOException;
import com.mojang.realmsclient.gui.ChatFormatting;
import java.io.FileWriter;
import com.onepop.api.util.file.FileUtil;
import java.nio.file.Paths;
import java.time.temporal.TemporalAccessor;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import me.rina.turok.util.TurokTick;
import java.util.List;
import com.onepop.api.setting.value.ValueNumber;
import com.onepop.api.setting.value.ValueBoolean;
import com.onepop.api.module.impl.ModuleCategory;
import com.onepop.api.module.registry.Registry;
import com.onepop.api.module.Module;

@Registry(name = "Search", tag = "Search", description = "Search module for find bases or a possible stash.", category = ModuleCategory.MISC)
public class ModuleSearch extends Module
{
    public static ValueBoolean settingSaveFile;
    public static ValueBoolean settingEnderCrystal;
    public static ValueBoolean settingWither;
    public static ValueBoolean settingChunk;
    public static ValueNumber settingRange;
    private final List<Artefact> artefactList;
    private final TurokTick delay;
    private final StringBuilder cacheFile;
    private final String newLine;
    
    public ModuleSearch() {
        this.artefactList = new ArrayList<Artefact>();
        this.delay = new TurokTick();
        this.cacheFile = new StringBuilder();
        this.newLine = System.getProperty("line.separator");
    }
    
    @Override
    public void onSetting() {
        ModuleSearch.settingRange.setEnabled(!ModuleSearch.settingChunk.getValue());
        if (!this.isEnabled()) {
            this.artefactList.clear();
        }
    }
    
    @Override
    public void onShutdown() {
        if (this.isEnabled()) {
            this.setDisabled();
        }
    }
    
    @Override
    public void onDisable() {
        if (ModuleSearch.settingSaveFile.getValue()) {
            try {
                final String pathFolder = "onepop/search/";
                final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("uuuu-MM-dd-HH-mm-ss");
                final LocalDateTime time = LocalDateTime.now();
                final String pathFile = "onepop/search/Search-" + formatter.format(time) + ".txt";
                FileUtil.createFolderIfNeeded(Paths.get("onepop/search/", new String[0]));
                FileUtil.createFileIfNeeded(Paths.get(pathFile, new String[0]));
                final FileWriter file = new FileWriter(pathFile);
                file.write(this.cacheFile.toString());
                file.close();
                this.print(ChatFormatting.YELLOW + "Saved cache search! " + formatter.format(time));
            }
            catch (IOException exc) {
                this.print("An error occurred in save search cache.");
            }
        }
    }
    
    @Override
    public void onEnable() {
        if (NullUtil.isPlayerWorld()) {
            return;
        }
        this.delay.reset();
        this.artefactList.clear();
        this.cleanInfo();
        if (ModuleSearch.settingSaveFile.getValue()) {
            this.cacheFile.append("#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$##$" + this.newLine);
            this.cacheFile.append("File Generated By Search From Onepop Client." + this.newLine);
            this.cacheFile.append("Username: " + ModuleSearch.mc.player.getName() + this.newLine);
            this.cacheFile.append("ServerIP: " + ((ModuleSearch.mc.getCurrentServerData() == null) ? "Vanilla" : ModuleSearch.mc.getCurrentServerData().serverIP) + this.newLine);
            this.cacheFile.append("#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$##$" + this.newLine);
        }
    }
    
    @Listener
    public void onTick(final RunTickEvent event) {
        if (NullUtil.isPlayerWorld()) {
            return;
        }
        this.updateSearchTileEntity();
        this.updateSearchEntity();
        if (this.artefactList.size() >= 64) {
            this.artefactList.clear();
        }
    }
    
    protected void updateSearchTileEntity() {
        for (final TileEntity tileEntities : ModuleSearch.mc.world.loadedTileEntityList) {
            if (ModuleSearch.mc.player.getDistance((double)tileEntities.getPos().x, (double)tileEntities.getPos().y, (double)tileEntities.getPos().z) > ModuleSearch.settingRange.getValue().intValue() && !ModuleSearch.settingChunk.getValue()) {
                continue;
            }
            if (this.containsArtefact(tileEntities.getPos())) {
                continue;
            }
            ChatUtil.print(ChatFormatting.YELLOW + "Found tile entity artefact: " + BlockUtil.getState(tileEntities.getPos()).getBlock().getLocalizedName() + " " + "[" + tileEntities.getPos().x + ", " + tileEntities.getPos().y + ", " + tileEntities.getPos().z + "]");
            this.makeInfo("Found tile entity: " + BlockUtil.getState(tileEntities.getPos()).getBlock().getLocalizedName() + " " + "[" + tileEntities.getPos().x + ", " + tileEntities.getPos().y + ", " + tileEntities.getPos().z + "]");
            final Artefact artefact = new Artefact(tileEntities.getBlockType().toString(), tileEntities.getPos());
            artefact.setEntity(false);
            artefact.setTileEntity(true);
            this.artefactList.add(artefact);
        }
    }
    
    protected void updateSearchEntity() {
        for (final Entity entities : ModuleSearch.mc.world.loadedEntityList) {
            if (ModuleSearch.mc.player.getDistanceToEntity(entities) > ModuleSearch.settingRange.getValue().intValue() && !ModuleSearch.settingChunk.getValue()) {
                continue;
            }
            final boolean registryArtefact = !this.containsArtefact(entities.getPosition()) && ((entities instanceof EntityEnderCrystal && ModuleSearch.settingEnderCrystal.getValue()) || (entities instanceof EntityWither && ModuleSearch.settingWither.getValue()));
            if (!registryArtefact) {
                continue;
            }
            ChatUtil.print(ChatFormatting.YELLOW + "Found entity artefact: " + entities.getName() + " " + "[" + entities.getPosition().x + ", " + entities.getPosition().y + ", " + entities.getPosition().z + "]");
            this.makeInfo("Found entity: " + entities.getName() + " " + "[" + entities.getPosition().x + ", " + entities.getPosition().y + ", " + entities.getPosition().z + "]");
            final Artefact artefact = new Artefact(entities.getName(), entities.getPosition());
            artefact.setEntity(true);
            artefact.setTileEntity(false);
            this.artefactList.add(artefact);
        }
    }
    
    public void makeInfo(final String info) {
        final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        final LocalTime time = LocalTime.now();
        this.cacheFile.append("[" + formatter.format(time) + "] [Info] " + info + this.newLine);
    }
    
    public void cleanInfo() {
        this.cacheFile.setLength(0);
    }
    
    public boolean containsArtefact(final BlockPos position) {
        for (final Artefact artefacts : this.artefactList) {
            if (PositionUtil.collideBlockPos(artefacts.getPosition(), position)) {
                return true;
            }
        }
        return false;
    }
    
    static {
        ModuleSearch.settingSaveFile = new ValueBoolean("Save File", "SaveFile", "Save all finds in a file.", true);
        ModuleSearch.settingEnderCrystal = new ValueBoolean("Ender Crystal", "EnderCrystal", "Search ender crystals.", true);
        ModuleSearch.settingWither = new ValueBoolean("Wither", "Wither", "Search for withers.", true);
        ModuleSearch.settingChunk = new ValueBoolean("Chunk", "Chunk", "Find for artefacts at all chunk.", true);
        ModuleSearch.settingRange = new ValueNumber("Range", "Range.", "Search range.", 200, 1, 500);
    }
    
    public static class Artefact
    {
        private boolean isEntity;
        private boolean isTileEntity;
        private BlockPos position;
        private String name;
        
        public Artefact(final String name, final BlockPos pos) {
            this.name = name;
            this.position = pos;
        }
        
        public String getName() {
            return this.name;
        }
        
        public BlockPos getPosition() {
            return this.position;
        }
        
        public void setEntity(final boolean entity) {
            this.isEntity = entity;
        }
        
        public boolean isEntity() {
            return this.isEntity;
        }
        
        public void setTileEntity(final boolean tileEntity) {
            this.isTileEntity = tileEntity;
        }
        
        public boolean isTileEntity() {
            return this.isTileEntity;
        }
    }
}
