// 
// Decompiled by Procyon v0.6-prerelease
// 

package com.onepop.client.module.exploit;

import net.minecraft.network.play.server.SPacketWorldBorder;
import net.minecraft.network.play.server.SPacketWindowProperty;
import net.minecraft.network.play.server.SPacketWindowItems;
import net.minecraft.network.play.server.SPacketUseBed;
import net.minecraft.network.play.server.SPacketUpdateTileEntity;
import net.minecraft.network.play.server.SPacketUpdateScore;
import net.minecraft.network.play.server.SPacketUpdateHealth;
import net.minecraft.network.play.server.SPacketUpdateBossInfo;
import net.minecraft.network.play.server.SPacketUnloadChunk;
import net.minecraft.network.play.server.SPacketTitle;
import net.minecraft.network.play.server.SPacketTimeUpdate;
import net.minecraft.network.play.server.SPacketTeams;
import net.minecraft.network.play.server.SPacketTabComplete;
import net.minecraft.network.play.server.SPacketStatistics;
import net.minecraft.network.play.server.SPacketSpawnPosition;
import net.minecraft.network.play.server.SPacketSpawnPlayer;
import net.minecraft.network.play.server.SPacketSpawnPainting;
import net.minecraft.network.play.server.SPacketSpawnObject;
import net.minecraft.network.play.server.SPacketSpawnMob;
import net.minecraft.network.play.server.SPacketSpawnGlobalEntity;
import net.minecraft.network.play.server.SPacketSpawnExperienceOrb;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.network.play.server.SPacketSignEditorOpen;
import net.minecraft.network.play.server.SPacketSetSlot;
import net.minecraft.network.play.server.SPacketSetPassengers;
import net.minecraft.network.play.server.SPacketSetExperience;
import net.minecraft.network.play.server.SPacketServerDifficulty;
import net.minecraft.network.play.server.SPacketSelectAdvancementsTab;
import net.minecraft.network.play.server.SPacketScoreboardObjective;
import net.minecraft.network.play.server.SPacketRespawn;
import net.minecraft.network.play.server.SPacketResourcePackSend;
import net.minecraft.network.play.server.SPacketRemoveEntityEffect;
import net.minecraft.network.play.server.SPacketRecipeBook;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.network.play.server.SPacketPlayerListItem;
import net.minecraft.network.play.server.SPacketPlayerListHeaderFooter;
import net.minecraft.network.play.server.SPacketPlayerAbilities;
import net.minecraft.network.play.server.SPacketPlaceGhostRecipe;
import net.minecraft.network.play.server.SPacketParticles;
import net.minecraft.network.play.server.SPacketOpenWindow;
import net.minecraft.network.play.server.SPacketMultiBlockChange;
import net.minecraft.network.play.server.SPacketMoveVehicle;
import net.minecraft.network.play.server.SPacketMaps;
import net.minecraft.network.play.server.SPacketKeepAlive;
import net.minecraft.network.play.server.SPacketJoinGame;
import net.minecraft.network.play.server.SPacketHeldItemChange;
import net.minecraft.network.play.server.SPacketExplosion;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.network.play.server.SPacketEntityStatus;
import net.minecraft.network.play.server.SPacketEntityProperties;
import net.minecraft.network.play.server.SPacketEntityMetadata;
import net.minecraft.network.play.server.SPacketEntityHeadLook;
import net.minecraft.network.play.server.SPacketEntityEquipment;
import net.minecraft.network.play.server.SPacketEntityEffect;
import net.minecraft.network.play.server.SPacketEntityAttach;
import net.minecraft.network.play.server.SPacketEntity;
import net.minecraft.network.play.server.SPacketEffect;
import net.minecraft.network.play.server.SPacketDisplayObjective;
import net.minecraft.network.play.server.SPacketDisconnect;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketCustomSound;
import net.minecraft.network.play.server.SPacketCustomPayload;
import net.minecraft.network.play.server.SPacketCooldown;
import net.minecraft.network.play.server.SPacketConfirmTransaction;
import net.minecraft.network.play.server.SPacketCombatEvent;
import net.minecraft.network.play.server.SPacketCollectItem;
import net.minecraft.network.play.server.SPacketCloseWindow;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.network.play.server.SPacketChat;
import net.minecraft.network.play.server.SPacketChangeGameState;
import net.minecraft.network.play.server.SPacketCamera;
import net.minecraft.network.play.server.SPacketBlockChange;
import net.minecraft.network.play.server.SPacketBlockBreakAnim;
import net.minecraft.network.play.server.SPacketBlockAction;
import net.minecraft.network.play.server.SPacketAnimation;
import net.minecraft.network.play.server.SPacketAdvancementInfo;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketUpdateSign;
import net.minecraft.network.play.client.CPacketTabComplete;
import net.minecraft.network.play.client.CPacketSteerBoat;
import net.minecraft.network.play.client.CPacketSpectate;
import net.minecraft.network.play.client.CPacketSeenAdvancements;
import net.minecraft.network.play.client.CPacketResourcePackStatus;
import net.minecraft.network.play.client.CPacketRecipeInfo;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlaceRecipe;
import net.minecraft.network.play.client.CPacketKeepAlive;
import net.minecraft.network.play.client.CPacketInput;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketEnchantItem;
import net.minecraft.network.play.client.CPacketCustomPayload;
import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketCloseWindow;
import net.minecraft.network.play.client.CPacketClientStatus;
import net.minecraft.network.play.client.CPacketClientSettings;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketChatMessage;
import net.minecraft.network.play.client.CPacketAnimation;
import com.onepop.client.event.network.PacketEvent;
import com.onepop.api.setting.value.ValueBoolean;
import com.onepop.api.module.impl.ModuleCategory;
import com.onepop.api.module.registry.Registry;
import com.onepop.api.module.Module;

@Registry(name = "Cancel Packets", tag = "CancelPackets", description = "Explore exploits canceling packets.", category = ModuleCategory.EXPLOIT)
public class ModuleCancelPackets extends Module
{
    public static ValueBoolean settingResetAll;
    public static ValueBoolean settingSPacketAdvancementInfo;
    public static ValueBoolean settingSPacketAnimation;
    public static ValueBoolean settingSPacketBlockAction;
    public static ValueBoolean settingSPacketBlockBreakAnim;
    public static ValueBoolean settingSPacketBlockChange;
    public static ValueBoolean settingSPacketCamera;
    public static ValueBoolean settingSPacketChangeGameState;
    public static ValueBoolean settingSPacketChat;
    public static ValueBoolean settingSPacketChunkData;
    public static ValueBoolean settingSPacketCloseWindow;
    public static ValueBoolean settingSPacketCollectItem;
    public static ValueBoolean settingSPacketCombatEvent;
    public static ValueBoolean settingSPacketConfirmTransaction;
    public static ValueBoolean settingSPacketCooldown;
    public static ValueBoolean settingSPacketCustomPayload;
    public static ValueBoolean settingSPacketCustomSound;
    public static ValueBoolean settingSPacketDestroyEntities;
    public static ValueBoolean settingSPacketDisconnect;
    public static ValueBoolean settingSPacketDisplayObjective;
    public static ValueBoolean settingSPacketEffect;
    public static ValueBoolean settingSPacketEntity;
    public static ValueBoolean settingSPacketEntityAttach;
    public static ValueBoolean settingSPacketEntityEffect;
    public static ValueBoolean settingSPacketEntityEquipment;
    public static ValueBoolean settingSPacketEntityHeadLook;
    public static ValueBoolean settingSPacketEntityMetadata;
    public static ValueBoolean settingSPacketEntityProperties;
    public static ValueBoolean settingSPacketEntityStatus;
    public static ValueBoolean settingSPacketEntityTeleport;
    public static ValueBoolean settingSPacketEntityVelocity;
    public static ValueBoolean settingSPacketExplosion;
    public static ValueBoolean settingSPacketHeldItemChange;
    public static ValueBoolean settingSPacketJoinGame;
    public static ValueBoolean settingSPacketKeepAlive;
    public static ValueBoolean settingSPacketMaps;
    public static ValueBoolean settingSPacketMoveVehicle;
    public static ValueBoolean settingSPacketMultiBlockChange;
    public static ValueBoolean settingSPacketOpenWindow;
    public static ValueBoolean settingSPacketParticles;
    public static ValueBoolean settingSPacketPlaceGhostRecipe;
    public static ValueBoolean settingSPacketPlayerAbilities;
    public static ValueBoolean settingSPacketPlayerListHeaderFooter;
    public static ValueBoolean settingSPacketPlayerListItem;
    public static ValueBoolean settingSPacketPlayerPosLook;
    public static ValueBoolean settingSPacketRecipeBook;
    public static ValueBoolean settingSPacketRemoveEntityEffect;
    public static ValueBoolean settingSPacketResourcePackSend;
    public static ValueBoolean settingSPacketRespawn;
    public static ValueBoolean settingSPacketScoreboardObjective;
    public static ValueBoolean settingSPacketSelectAdvancementsTab;
    public static ValueBoolean settingSPacketServerDifficulty;
    public static ValueBoolean settingSPacketSetExperience;
    public static ValueBoolean settingSPacketSetPassengers;
    public static ValueBoolean settingSPacketSetSlot;
    public static ValueBoolean settingSPacketSignEditorOpen;
    public static ValueBoolean settingSPacketSoundEffect;
    public static ValueBoolean settingSPacketSpawnExperienceOrb;
    public static ValueBoolean settingSPacketSpawnGlobalEntity;
    public static ValueBoolean settingSPacketSpawnMob;
    public static ValueBoolean settingSPacketSpawnObject;
    public static ValueBoolean settingSPacketSpawnPainting;
    public static ValueBoolean settingSPacketSpawnPlayer;
    public static ValueBoolean settingSPacketSpawnPosition;
    public static ValueBoolean settingSPacketStatistics;
    public static ValueBoolean settingSPacketTabComplete;
    public static ValueBoolean settingSPacketTeams;
    public static ValueBoolean settingSPacketTimeUpdate;
    public static ValueBoolean settingSPacketTitle;
    public static ValueBoolean settingSPacketUnloadChunk;
    public static ValueBoolean settingSPacketUpdateBossInfo;
    public static ValueBoolean settingSPacketUpdateHealth;
    public static ValueBoolean settingSPacketUpdateScore;
    public static ValueBoolean settingSPacketUpdateTileEntity;
    public static ValueBoolean settingSPacketUseBed;
    public static ValueBoolean settingSPacketWindowItems;
    public static ValueBoolean settingSPacketWindowProperty;
    public static ValueBoolean settingSPacketWorldBorder;
    public static ValueBoolean settingCPacketAnimation;
    public static ValueBoolean settingCPacketChatMessage;
    public static ValueBoolean settingCPacketClickWindow;
    public static ValueBoolean settingCPacketClientSettings;
    public static ValueBoolean settingCPacketClientStatus;
    public static ValueBoolean settingCPacketCloseWindows;
    public static ValueBoolean settingCPacketConfirmTeleport;
    public static ValueBoolean settingCPacketConfirmTransaction;
    public static ValueBoolean settingCPacketCreativeInventoryAction;
    public static ValueBoolean settingCPacketCustomPayload;
    public static ValueBoolean settingCPacketEnchantItem;
    public static ValueBoolean settingCPacketEntityAction;
    public static ValueBoolean settingCPacketHeldItemChange;
    public static ValueBoolean settingCPacketInput;
    public static ValueBoolean settingCPacketKeepAlive;
    public static ValueBoolean settingCPacketPlaceRecipe;
    public static ValueBoolean settingCPacketPlayer;
    public static ValueBoolean settingCPacketPlayerAbility;
    public static ValueBoolean settingCPacketPlayerDigging;
    public static ValueBoolean settingCPacketPlayerTryUseItem;
    public static ValueBoolean settingCPacketPlayerTryUseItemOnBlock;
    public static ValueBoolean settingCPacketRecipeInfo;
    public static ValueBoolean settingCPacketResourcePackStatus;
    public static ValueBoolean settingCPacketSeenAdvancements;
    public static ValueBoolean settingCPacketPlayerPacket;
    public static ValueBoolean settingCPacketSpectate;
    public static ValueBoolean settingCPacketSteerBoat;
    public static ValueBoolean settingCPacketTabComplete;
    public static ValueBoolean settingCPacketUpdateSign;
    public static ValueBoolean settingCPacketUseEntity;
    public static ValueBoolean settingCPacketVehicleMove;
    
    @Override
    public void onShutdown() {
        this.setDisabled();
    }
    
    @Override
    public void onSetting() {
        if (ModuleCancelPackets.settingResetAll.getValue()) {
            ModuleCancelPackets.settingSPacketAdvancementInfo.setValue(false);
            ModuleCancelPackets.settingSPacketAnimation.setValue(false);
            ModuleCancelPackets.settingSPacketBlockAction.setValue(false);
            ModuleCancelPackets.settingSPacketBlockBreakAnim.setValue(false);
            ModuleCancelPackets.settingSPacketBlockChange.setValue(false);
            ModuleCancelPackets.settingSPacketCamera.setValue(false);
            ModuleCancelPackets.settingSPacketChangeGameState.setValue(false);
            ModuleCancelPackets.settingSPacketChat.setValue(false);
            ModuleCancelPackets.settingSPacketChunkData.setValue(false);
            ModuleCancelPackets.settingSPacketCloseWindow.setValue(false);
            ModuleCancelPackets.settingSPacketCollectItem.setValue(false);
            ModuleCancelPackets.settingSPacketCombatEvent.setValue(false);
            ModuleCancelPackets.settingSPacketConfirmTransaction.setValue(false);
            ModuleCancelPackets.settingSPacketCooldown.setValue(false);
            ModuleCancelPackets.settingSPacketCustomPayload.setValue(false);
            ModuleCancelPackets.settingSPacketCustomSound.setValue(false);
            ModuleCancelPackets.settingSPacketDestroyEntities.setValue(false);
            ModuleCancelPackets.settingSPacketDisconnect.setValue(false);
            ModuleCancelPackets.settingSPacketDisplayObjective.setValue(false);
            ModuleCancelPackets.settingSPacketEffect.setValue(false);
            ModuleCancelPackets.settingSPacketEntity.setValue(false);
            ModuleCancelPackets.settingSPacketEntityAttach.setValue(false);
            ModuleCancelPackets.settingSPacketEntityEffect.setValue(false);
            ModuleCancelPackets.settingSPacketEntityEquipment.setValue(false);
            ModuleCancelPackets.settingSPacketEntityHeadLook.setValue(false);
            ModuleCancelPackets.settingSPacketEntityMetadata.setValue(false);
            ModuleCancelPackets.settingSPacketEntityProperties.setValue(false);
            ModuleCancelPackets.settingSPacketEntityStatus.setValue(false);
            ModuleCancelPackets.settingSPacketEntityTeleport.setValue(false);
            ModuleCancelPackets.settingSPacketEntityVelocity.setValue(false);
            ModuleCancelPackets.settingSPacketExplosion.setValue(false);
            ModuleCancelPackets.settingSPacketHeldItemChange.setValue(false);
            ModuleCancelPackets.settingSPacketJoinGame.setValue(false);
            ModuleCancelPackets.settingSPacketKeepAlive.setValue(false);
            ModuleCancelPackets.settingSPacketMaps.setValue(false);
            ModuleCancelPackets.settingSPacketMoveVehicle.setValue(false);
            ModuleCancelPackets.settingSPacketMultiBlockChange.setValue(false);
            ModuleCancelPackets.settingSPacketOpenWindow.setValue(false);
            ModuleCancelPackets.settingSPacketParticles.setValue(false);
            ModuleCancelPackets.settingSPacketPlaceGhostRecipe.setValue(false);
            ModuleCancelPackets.settingSPacketPlayerAbilities.setValue(false);
            ModuleCancelPackets.settingSPacketPlayerListHeaderFooter.setValue(false);
            ModuleCancelPackets.settingSPacketPlayerListItem.setValue(false);
            ModuleCancelPackets.settingSPacketPlayerPosLook.setValue(false);
            ModuleCancelPackets.settingSPacketRecipeBook.setValue(false);
            ModuleCancelPackets.settingSPacketRemoveEntityEffect.setValue(false);
            ModuleCancelPackets.settingSPacketResourcePackSend.setValue(false);
            ModuleCancelPackets.settingSPacketRespawn.setValue(false);
            ModuleCancelPackets.settingSPacketScoreboardObjective.setValue(false);
            ModuleCancelPackets.settingSPacketSelectAdvancementsTab.setValue(false);
            ModuleCancelPackets.settingSPacketServerDifficulty.setValue(false);
            ModuleCancelPackets.settingSPacketSetExperience.setValue(false);
            ModuleCancelPackets.settingSPacketSetPassengers.setValue(false);
            ModuleCancelPackets.settingSPacketSetSlot.setValue(false);
            ModuleCancelPackets.settingSPacketSignEditorOpen.setValue(false);
            ModuleCancelPackets.settingSPacketSoundEffect.setValue(false);
            ModuleCancelPackets.settingSPacketSpawnExperienceOrb.setValue(false);
            ModuleCancelPackets.settingSPacketSpawnGlobalEntity.setValue(false);
            ModuleCancelPackets.settingSPacketSpawnMob.setValue(false);
            ModuleCancelPackets.settingSPacketSpawnObject.setValue(false);
            ModuleCancelPackets.settingSPacketSpawnPainting.setValue(false);
            ModuleCancelPackets.settingSPacketSpawnPlayer.setValue(false);
            ModuleCancelPackets.settingSPacketSpawnPosition.setValue(false);
            ModuleCancelPackets.settingSPacketStatistics.setValue(false);
            ModuleCancelPackets.settingSPacketTabComplete.setValue(false);
            ModuleCancelPackets.settingSPacketTeams.setValue(false);
            ModuleCancelPackets.settingSPacketTimeUpdate.setValue(false);
            ModuleCancelPackets.settingSPacketTitle.setValue(false);
            ModuleCancelPackets.settingSPacketUnloadChunk.setValue(false);
            ModuleCancelPackets.settingSPacketUpdateBossInfo.setValue(false);
            ModuleCancelPackets.settingSPacketUpdateHealth.setValue(false);
            ModuleCancelPackets.settingSPacketUpdateScore.setValue(false);
            ModuleCancelPackets.settingSPacketUpdateTileEntity.setValue(false);
            ModuleCancelPackets.settingSPacketUseBed.setValue(false);
            ModuleCancelPackets.settingSPacketWindowItems.setValue(false);
            ModuleCancelPackets.settingSPacketWindowProperty.setValue(false);
            ModuleCancelPackets.settingSPacketWorldBorder.setValue(false);
            ModuleCancelPackets.settingCPacketAnimation.setValue(false);
            ModuleCancelPackets.settingCPacketChatMessage.setValue(false);
            ModuleCancelPackets.settingCPacketClickWindow.setValue(false);
            ModuleCancelPackets.settingCPacketClientSettings.setValue(false);
            ModuleCancelPackets.settingCPacketClientStatus.setValue(false);
            ModuleCancelPackets.settingCPacketCloseWindows.setValue(false);
            ModuleCancelPackets.settingCPacketConfirmTeleport.setValue(false);
            ModuleCancelPackets.settingCPacketConfirmTransaction.setValue(false);
            ModuleCancelPackets.settingCPacketCreativeInventoryAction.setValue(false);
            ModuleCancelPackets.settingCPacketCustomPayload.setValue(false);
            ModuleCancelPackets.settingCPacketEnchantItem.setValue(false);
            ModuleCancelPackets.settingCPacketEntityAction.setValue(false);
            ModuleCancelPackets.settingCPacketHeldItemChange.setValue(false);
            ModuleCancelPackets.settingCPacketInput.setValue(false);
            ModuleCancelPackets.settingCPacketKeepAlive.setValue(false);
            ModuleCancelPackets.settingCPacketPlaceRecipe.setValue(false);
            ModuleCancelPackets.settingCPacketPlayer.setValue(false);
            ModuleCancelPackets.settingCPacketPlayerAbility.setValue(false);
            ModuleCancelPackets.settingCPacketPlayerDigging.setValue(false);
            ModuleCancelPackets.settingCPacketPlayerTryUseItem.setValue(false);
            ModuleCancelPackets.settingCPacketPlayerTryUseItemOnBlock.setValue(false);
            ModuleCancelPackets.settingCPacketRecipeInfo.setValue(false);
            ModuleCancelPackets.settingCPacketResourcePackStatus.setValue(false);
            ModuleCancelPackets.settingCPacketSeenAdvancements.setValue(false);
            ModuleCancelPackets.settingCPacketPlayerPacket.setValue(false);
            ModuleCancelPackets.settingCPacketSpectate.setValue(false);
            ModuleCancelPackets.settingCPacketSteerBoat.setValue(false);
            ModuleCancelPackets.settingCPacketTabComplete.setValue(false);
            ModuleCancelPackets.settingCPacketUpdateSign.setValue(false);
            ModuleCancelPackets.settingCPacketUseEntity.setValue(false);
            ModuleCancelPackets.settingCPacketVehicleMove.setValue(false);
            this.setDisabled();
            ModuleCancelPackets.settingResetAll.setValue(false);
        }
    }
    
    @Listener
    public void onListenSendPacket(final PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketAnimation && ModuleCancelPackets.settingSPacketAnimation.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketChatMessage && ModuleCancelPackets.settingCPacketChatMessage.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketClickWindow && ModuleCancelPackets.settingCPacketClickWindow.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketClientSettings && ModuleCancelPackets.settingCPacketClientSettings.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketClientStatus && ModuleCancelPackets.settingCPacketClientStatus.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketCloseWindow && ModuleCancelPackets.settingCPacketCloseWindows.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketConfirmTeleport && ModuleCancelPackets.settingCPacketConfirmTeleport.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketConfirmTransaction && ModuleCancelPackets.settingCPacketConfirmTransaction.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketCreativeInventoryAction && ModuleCancelPackets.settingCPacketCreativeInventoryAction.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketCustomPayload && ModuleCancelPackets.settingCPacketCustomPayload.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketEnchantItem && ModuleCancelPackets.settingCPacketEnchantItem.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketEntityAction && ModuleCancelPackets.settingCPacketEntityAction.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketHeldItemChange && ModuleCancelPackets.settingCPacketHeldItemChange.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketInput && ModuleCancelPackets.settingCPacketInput.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketKeepAlive && ModuleCancelPackets.settingCPacketKeepAlive.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlaceRecipe && ModuleCancelPackets.settingCPacketPlaceRecipe.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayer && ModuleCancelPackets.settingCPacketPlayer.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayerAbilities && ModuleCancelPackets.settingCPacketPlayerAbility.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayerDigging && ModuleCancelPackets.settingCPacketPlayerDigging.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayerTryUseItem && ModuleCancelPackets.settingCPacketPlayerTryUseItem.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && ModuleCancelPackets.settingCPacketPlayerTryUseItemOnBlock.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketRecipeInfo && ModuleCancelPackets.settingCPacketRecipeInfo.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketResourcePackStatus && ModuleCancelPackets.settingCPacketResourcePackStatus.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketSeenAdvancements && ModuleCancelPackets.settingCPacketSeenAdvancements.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketSpectate && ModuleCancelPackets.settingCPacketSpectate.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketSteerBoat && ModuleCancelPackets.settingCPacketSteerBoat.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketTabComplete && ModuleCancelPackets.settingCPacketTabComplete.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketUpdateSign && ModuleCancelPackets.settingCPacketUpdateSign.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketUseEntity && ModuleCancelPackets.settingCPacketUseEntity.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketVehicleMove && ModuleCancelPackets.settingCPacketVehicleMove.getValue()) {
            event.setCanceled(true);
        }
    }
    
    @Listener
    public void onListenReceivePacket(final PacketEvent.Receive event) {
        if (event.getPacket() instanceof SPacketAdvancementInfo && ModuleCancelPackets.settingSPacketAdvancementInfo.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketAnimation && ModuleCancelPackets.settingSPacketAnimation.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketBlockAction && ModuleCancelPackets.settingSPacketBlockAction.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketBlockBreakAnim && ModuleCancelPackets.settingSPacketBlockBreakAnim.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketBlockChange && ModuleCancelPackets.settingSPacketBlockChange.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCamera && ModuleCancelPackets.settingSPacketCamera.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketChangeGameState && ModuleCancelPackets.settingSPacketChangeGameState.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketChat && ModuleCancelPackets.settingSPacketChat.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketChunkData && ModuleCancelPackets.settingSPacketChunkData.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCloseWindow && ModuleCancelPackets.settingSPacketCloseWindow.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCollectItem && ModuleCancelPackets.settingSPacketCollectItem.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCombatEvent && ModuleCancelPackets.settingSPacketCombatEvent.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketConfirmTransaction && ModuleCancelPackets.settingSPacketConfirmTransaction.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCooldown && ModuleCancelPackets.settingSPacketCooldown.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCustomPayload && ModuleCancelPackets.settingSPacketCustomPayload.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCustomSound && ModuleCancelPackets.settingSPacketCustomSound.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketDestroyEntities && ModuleCancelPackets.settingSPacketDestroyEntities.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketDisconnect && ModuleCancelPackets.settingSPacketDisconnect.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketChunkData && ModuleCancelPackets.settingSPacketChunkData.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCloseWindow && ModuleCancelPackets.settingSPacketCloseWindow.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketCollectItem && ModuleCancelPackets.settingSPacketCollectItem.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketDisplayObjective && ModuleCancelPackets.settingSPacketDisplayObjective.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEffect && ModuleCancelPackets.settingSPacketEffect.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntity && ModuleCancelPackets.settingSPacketEntity.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityAttach && ModuleCancelPackets.settingSPacketEntityAttach.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityEffect && ModuleCancelPackets.settingSPacketEntityEffect.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityEquipment && ModuleCancelPackets.settingSPacketEntityEquipment.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityHeadLook && ModuleCancelPackets.settingSPacketEntityHeadLook.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityMetadata && ModuleCancelPackets.settingSPacketEntityMetadata.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityProperties && ModuleCancelPackets.settingSPacketEntityProperties.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityStatus && ModuleCancelPackets.settingSPacketEntityStatus.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityTeleport && ModuleCancelPackets.settingSPacketEntityTeleport.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketEntityVelocity && ModuleCancelPackets.settingSPacketEntityVelocity.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketExplosion && ModuleCancelPackets.settingSPacketExplosion.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketHeldItemChange && ModuleCancelPackets.settingSPacketHeldItemChange.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketJoinGame && ModuleCancelPackets.settingSPacketJoinGame.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketKeepAlive && ModuleCancelPackets.settingSPacketKeepAlive.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketMaps && ModuleCancelPackets.settingSPacketMaps.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketMoveVehicle && ModuleCancelPackets.settingSPacketMoveVehicle.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketMultiBlockChange && ModuleCancelPackets.settingSPacketMultiBlockChange.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketOpenWindow && ModuleCancelPackets.settingSPacketOpenWindow.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketParticles && ModuleCancelPackets.settingSPacketParticles.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketPlaceGhostRecipe && ModuleCancelPackets.settingSPacketPlaceGhostRecipe.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketPlayerAbilities && ModuleCancelPackets.settingSPacketPlayerAbilities.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketPlayerListHeaderFooter && ModuleCancelPackets.settingSPacketPlayerListHeaderFooter.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketPlayerListItem && ModuleCancelPackets.settingSPacketPlayerListItem.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketPlayerPosLook && ModuleCancelPackets.settingSPacketPlayerPosLook.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketRecipeBook && ModuleCancelPackets.settingSPacketRecipeBook.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketRemoveEntityEffect && ModuleCancelPackets.settingSPacketRemoveEntityEffect.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketResourcePackSend && ModuleCancelPackets.settingSPacketResourcePackSend.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketRespawn && ModuleCancelPackets.settingSPacketRespawn.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketScoreboardObjective && ModuleCancelPackets.settingSPacketScoreboardObjective.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSelectAdvancementsTab && ModuleCancelPackets.settingSPacketSelectAdvancementsTab.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketServerDifficulty && ModuleCancelPackets.settingSPacketServerDifficulty.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSetExperience && ModuleCancelPackets.settingSPacketSetExperience.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSetPassengers && ModuleCancelPackets.settingSPacketSetPassengers.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSetSlot && ModuleCancelPackets.settingSPacketSetSlot.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSignEditorOpen && ModuleCancelPackets.settingSPacketSignEditorOpen.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSoundEffect && ModuleCancelPackets.settingSPacketSoundEffect.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSpawnExperienceOrb && ModuleCancelPackets.settingSPacketSpawnExperienceOrb.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSpawnGlobalEntity && ModuleCancelPackets.settingSPacketSpawnGlobalEntity.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSpawnMob && ModuleCancelPackets.settingSPacketSpawnMob.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSpawnObject && ModuleCancelPackets.settingSPacketSpawnObject.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSpawnPainting && ModuleCancelPackets.settingSPacketSpawnPainting.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSpawnPlayer && ModuleCancelPackets.settingSPacketSpawnPlayer.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketSpawnPosition && ModuleCancelPackets.settingSPacketSpawnPosition.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketStatistics && ModuleCancelPackets.settingSPacketStatistics.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketTabComplete && ModuleCancelPackets.settingSPacketTabComplete.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketTeams && ModuleCancelPackets.settingSPacketTeams.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketTimeUpdate && ModuleCancelPackets.settingSPacketTimeUpdate.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketTitle && ModuleCancelPackets.settingSPacketTitle.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketUnloadChunk && ModuleCancelPackets.settingSPacketUnloadChunk.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketUpdateBossInfo && ModuleCancelPackets.settingSPacketUpdateBossInfo.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketUpdateHealth && ModuleCancelPackets.settingSPacketUpdateHealth.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketUpdateScore && ModuleCancelPackets.settingSPacketUpdateScore.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketUpdateTileEntity && ModuleCancelPackets.settingSPacketUpdateTileEntity.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketUseBed && ModuleCancelPackets.settingSPacketUseBed.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketWindowItems && ModuleCancelPackets.settingSPacketWindowItems.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketWindowProperty && ModuleCancelPackets.settingSPacketWindowProperty.getValue()) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketWorldBorder && ModuleCancelPackets.settingSPacketWorldBorder.getValue()) {
            event.setCanceled(true);
        }
    }
    
    static {
        ModuleCancelPackets.settingResetAll = new ValueBoolean("Reset All", "ResetAll", "Reset all settings to false.", false);
        ModuleCancelPackets.settingSPacketAdvancementInfo = new ValueBoolean("SPacketAdvancementInfo", "SPacketAdvancementInfo", "An packet event.", false);
        ModuleCancelPackets.settingSPacketAnimation = new ValueBoolean("SPacketAnimation", "SPacketAnimation", "An packet event.", false);
        ModuleCancelPackets.settingSPacketBlockAction = new ValueBoolean("SPacketBlockAction", "SPacketBlockAction", "An packet event.", false);
        ModuleCancelPackets.settingSPacketBlockBreakAnim = new ValueBoolean("SPacketBlockBreakAnim", "SPacketBlockBreakAnim", "An packet event.", false);
        ModuleCancelPackets.settingSPacketBlockChange = new ValueBoolean("SPacketBlockChange", "SPacketBlockChange", "An packet event.", false);
        ModuleCancelPackets.settingSPacketCamera = new ValueBoolean("SPacketCamera", "SPacketCamera", "An packet event.", false);
        ModuleCancelPackets.settingSPacketChangeGameState = new ValueBoolean("SPacketChangeGameState", "SPacketChangeGameState", "An packet event.", false);
        ModuleCancelPackets.settingSPacketChat = new ValueBoolean("SPacketChat", "SPacketChat", "An packet event.", false);
        ModuleCancelPackets.settingSPacketChunkData = new ValueBoolean("SPacketChunkData", "SPacketChunkData", "An packet event.", false);
        ModuleCancelPackets.settingSPacketCloseWindow = new ValueBoolean("SPacketCloseWindow", "SPacketCloseWindow", "An packet event.", false);
        ModuleCancelPackets.settingSPacketCollectItem = new ValueBoolean("SPacketCollectItem", "SPacketCollectItem", "An packet event.", false);
        ModuleCancelPackets.settingSPacketCombatEvent = new ValueBoolean("SPacketCombatEvent", "SPacketCombatEvent", "An packet event.", false);
        ModuleCancelPackets.settingSPacketConfirmTransaction = new ValueBoolean("SPacketConfirmTransaction", "SPacketConfirmTransaction", "An packet event.", false);
        ModuleCancelPackets.settingSPacketCooldown = new ValueBoolean("SPacketCooldown", "SPacketCooldown", "An packet event.", false);
        ModuleCancelPackets.settingSPacketCustomPayload = new ValueBoolean("SPacketCustomPayload", "SPacketCustomPayload", "An packet event.", false);
        ModuleCancelPackets.settingSPacketCustomSound = new ValueBoolean("SPacketCustomSound", "SPacketCustomSound", "An packet event.", false);
        ModuleCancelPackets.settingSPacketDestroyEntities = new ValueBoolean("SPacketDestroyEntities", "SPacketDestroyEntities", "An packet event.", false);
        ModuleCancelPackets.settingSPacketDisconnect = new ValueBoolean("SPacketDisconnect", "SPacketDisconnect", "An packet event.", false);
        ModuleCancelPackets.settingSPacketDisplayObjective = new ValueBoolean("SPacketDisplayObjective", "SPacketDisplayObjective", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEffect = new ValueBoolean("SPacketEffect", "SPacketEffect", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntity = new ValueBoolean("SPacketEntity", "SPacketEntity", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityAttach = new ValueBoolean("SPacketEntityAttach", "SPacketEntityAttach", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityEffect = new ValueBoolean("SPacketEntityEffect", "SPacketEntityEffect", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityEquipment = new ValueBoolean("SPacketEntityEquipment", "SPacketEntityEquipment", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityHeadLook = new ValueBoolean("SPacketEntityHeadLook", "SPacketEntityHeadLook", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityMetadata = new ValueBoolean("SPacketEntityMetadata", "SPacketEntityMetadata", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityProperties = new ValueBoolean("SPacketEntityProperties", "SPacketEntityProperties", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityStatus = new ValueBoolean("SPacketEntityStatus", "SPacketEntityStatus", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityTeleport = new ValueBoolean("SPacketEntityTeleport", "SPacketEntityTeleport", "An packet event.", false);
        ModuleCancelPackets.settingSPacketEntityVelocity = new ValueBoolean("SPacketEntityVelocity", "SPacketEntityVelocity", "An packet event.", false);
        ModuleCancelPackets.settingSPacketExplosion = new ValueBoolean("SPacketExplosion", "SPacketExplosion", "An packet event.", false);
        ModuleCancelPackets.settingSPacketHeldItemChange = new ValueBoolean("SPacketHeldItemChange", "SPacketHeldItemChange", "An packet event.", false);
        ModuleCancelPackets.settingSPacketJoinGame = new ValueBoolean("SPacketJoinGame", "SPacketJoinGame", "An packet event.", false);
        ModuleCancelPackets.settingSPacketKeepAlive = new ValueBoolean("SPacketKeepAlive", "SPacketKeepAlive", "An packet event.", false);
        ModuleCancelPackets.settingSPacketMaps = new ValueBoolean("SPacketMaps", "SPacketMaps", "An packet event.", false);
        ModuleCancelPackets.settingSPacketMoveVehicle = new ValueBoolean("SPacketMoveVehicle", "SPacketMoveVehicle", "An packet event.", false);
        ModuleCancelPackets.settingSPacketMultiBlockChange = new ValueBoolean("SPacketMultiBlockChange", "SPacketMultiBlockChange", "An packet event.", false);
        ModuleCancelPackets.settingSPacketOpenWindow = new ValueBoolean("SPacketOpenWindow", "SPacketOpenWindow", "An packet event.", false);
        ModuleCancelPackets.settingSPacketParticles = new ValueBoolean("SPacketParticles", "SPacketParticles", "An packet event.", false);
        ModuleCancelPackets.settingSPacketPlaceGhostRecipe = new ValueBoolean("SPacketPlaceGhostRecipe", "SPacketPlaceGhostRecipe", "An packet event.", false);
        ModuleCancelPackets.settingSPacketPlayerAbilities = new ValueBoolean("SPacketPlayerAbilities", "SPacketPlayerAbilities", "An packet event.", false);
        ModuleCancelPackets.settingSPacketPlayerListHeaderFooter = new ValueBoolean("SPacketPlayerListHeaderFooter", "SPacketPlayerListHeaderFooter", "An packet event.", false);
        ModuleCancelPackets.settingSPacketPlayerListItem = new ValueBoolean("SPacketPlayerListItem", "SPacketPlayerListItem", "An packet event.", false);
        ModuleCancelPackets.settingSPacketPlayerPosLook = new ValueBoolean("SPacketPlayerPosLook", "SPacketPlayerPosLook", "An packet event.", false);
        ModuleCancelPackets.settingSPacketRecipeBook = new ValueBoolean("SPacketRecipeBook", "SPacketRecipeBook", "An packet event.", false);
        ModuleCancelPackets.settingSPacketRemoveEntityEffect = new ValueBoolean("SPacketRemoveEntityEffect", "SPacketRemoveEntityEffect", "An packet event.", false);
        ModuleCancelPackets.settingSPacketResourcePackSend = new ValueBoolean("SPacketResourcePackSend", "SPacketResourcePackSend", "An packet event.", false);
        ModuleCancelPackets.settingSPacketRespawn = new ValueBoolean("SPacketRespawn", "SPacketRespawn", "An packet event.", false);
        ModuleCancelPackets.settingSPacketScoreboardObjective = new ValueBoolean("SPacketScoreboardObjective", "SPacketScoreboardObjective", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSelectAdvancementsTab = new ValueBoolean("SPacketSelectAdvancementsTab", "SPacketSelectAdvancementsTab", "An packet event.", false);
        ModuleCancelPackets.settingSPacketServerDifficulty = new ValueBoolean("SPacketServerDifficulty", "SPacketServerDifficulty", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSetExperience = new ValueBoolean("SPacketSetExperience", "SPacketSetExperience", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSetPassengers = new ValueBoolean("SPacketSetPassengers", "SPacketSetPassengers", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSetSlot = new ValueBoolean("SPacketSetSlot", "SPacketSetSlot", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSignEditorOpen = new ValueBoolean("SPacketSignEditorOpen", "SPacketSignEditorOpen", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSoundEffect = new ValueBoolean("SPacketSoundEffect", "SPacketSoundEffect", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSpawnExperienceOrb = new ValueBoolean("SPacketSpawnExperienceOrb", "SPacketSpawnExperienceOrb", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSpawnGlobalEntity = new ValueBoolean("SPacketSpawnGlobalEntity", "SPacketSpawnGlobalEntity", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSpawnMob = new ValueBoolean("SPacketSpawnMob", "SPacketSpawnMob", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSpawnObject = new ValueBoolean("SPacketSpawnObject", "SPacketSpawnObject", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSpawnPainting = new ValueBoolean("SPacketSpawnPainting", "SPacketSpawnPainting", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSpawnPlayer = new ValueBoolean("SPacketSpawnPlayer", "SPacketSpawnPlayer", "An packet event.", false);
        ModuleCancelPackets.settingSPacketSpawnPosition = new ValueBoolean("SPacketSpawnPosition", "SPacketSpawnPosition", "An packet event.", false);
        ModuleCancelPackets.settingSPacketStatistics = new ValueBoolean("SPacketStatistics", "SPacketStatistics", "An packet event.", false);
        ModuleCancelPackets.settingSPacketTabComplete = new ValueBoolean("SPacketTabComplete", "SPacketTabComplete", "An packet event.", false);
        ModuleCancelPackets.settingSPacketTeams = new ValueBoolean("SPacketTeams", "SPacketTeams", "An packet event.", false);
        ModuleCancelPackets.settingSPacketTimeUpdate = new ValueBoolean("SPacketTimeUpdate", "SPacketTimeUpdate", "An packet event.", false);
        ModuleCancelPackets.settingSPacketTitle = new ValueBoolean("SPacketTitle", "SPacketTitle", "An packet event.", false);
        ModuleCancelPackets.settingSPacketUnloadChunk = new ValueBoolean("SPacketUnloadChunk", "SPacketUnloadChunk", "An packet event.", false);
        ModuleCancelPackets.settingSPacketUpdateBossInfo = new ValueBoolean("SPacketUpdateBossInfo", "SPacketUpdateBossInfo", "An packet event.", false);
        ModuleCancelPackets.settingSPacketUpdateHealth = new ValueBoolean("SPacketUpdateHealth", "SPacketUpdateHealth", "An packet event.", false);
        ModuleCancelPackets.settingSPacketUpdateScore = new ValueBoolean("SPacketUpdateScore", "SPacketUpdateScore", "An packet event.", false);
        ModuleCancelPackets.settingSPacketUpdateTileEntity = new ValueBoolean("SPacketUpdateTileEntity", "SPacketUpdateTileEntity", "An packet event.", false);
        ModuleCancelPackets.settingSPacketUseBed = new ValueBoolean("SPacketUseBed", "SPacketUseBed", "An packet event.", false);
        ModuleCancelPackets.settingSPacketWindowItems = new ValueBoolean("SPacketWindowItems", "SPacketWindowItems", "An packet event.", false);
        ModuleCancelPackets.settingSPacketWindowProperty = new ValueBoolean("SPacketWindowProperty", "SPacketWindowProperty", "An packet event.", false);
        ModuleCancelPackets.settingSPacketWorldBorder = new ValueBoolean("SPacketWorldBorder", "SPacketWorldBorder", "An packet event.", false);
        ModuleCancelPackets.settingCPacketAnimation = new ValueBoolean("CPacketAnimation", "CPacketAnimation", "An packet event.", false);
        ModuleCancelPackets.settingCPacketChatMessage = new ValueBoolean("CPacketChatMessage", "CPacketChatMessage", "An packet event.", false);
        ModuleCancelPackets.settingCPacketClickWindow = new ValueBoolean("CPacketClickWindow", "CPacketClickWindow", "An packet event.", false);
        ModuleCancelPackets.settingCPacketClientSettings = new ValueBoolean("CPacketClientSettings", "CPacketClientSettings", "An packet event.", false);
        ModuleCancelPackets.settingCPacketClientStatus = new ValueBoolean("CPacketClientStatus", "CPacketClientStatus", "An packet event.", false);
        ModuleCancelPackets.settingCPacketCloseWindows = new ValueBoolean("CPacketCloseWindows", "CPacketCloseWindows", "An packet event.", false);
        ModuleCancelPackets.settingCPacketConfirmTeleport = new ValueBoolean("CPacketConfirmTeleport", "CPacketConfirmTeleport", "An packet event.", false);
        ModuleCancelPackets.settingCPacketConfirmTransaction = new ValueBoolean("CPacketConfirmTransactions", "CPacketConfirmTransactions", "An packet event.", false);
        ModuleCancelPackets.settingCPacketCreativeInventoryAction = new ValueBoolean("CPacketCreativeInventoryAction", "CPacketCreativeInventoryAction", "An packet event.", false);
        ModuleCancelPackets.settingCPacketCustomPayload = new ValueBoolean("CPacketCustomPayloads", "CPacketCustomPayloads", "An packet event.", false);
        ModuleCancelPackets.settingCPacketEnchantItem = new ValueBoolean("CPacketEnchantItem", "CPacketEnchantItem", "An packet event.", false);
        ModuleCancelPackets.settingCPacketEntityAction = new ValueBoolean("CPacketEntityAction", "CPacketEntityAction", "An packet event.", false);
        ModuleCancelPackets.settingCPacketHeldItemChange = new ValueBoolean("CPacketHeldItemChanges", "CPacketHeldItemChanges", "An packet event.", false);
        ModuleCancelPackets.settingCPacketInput = new ValueBoolean("CPacketInput", "CPacketInput", "An packet event.", false);
        ModuleCancelPackets.settingCPacketKeepAlive = new ValueBoolean("CPacketKeepAlive", "CPacketKeepAlive", "An packet event.", false);
        ModuleCancelPackets.settingCPacketPlaceRecipe = new ValueBoolean("CPacketPlaceRecipe", "CPacketPlaceRecipe", "An packet event.", false);
        ModuleCancelPackets.settingCPacketPlayer = new ValueBoolean("CPacketPlayer", "CPacketPlayer", "An packet event.", false);
        ModuleCancelPackets.settingCPacketPlayerAbility = new ValueBoolean("CPacketPlayerAbility", "CPacketPlayerAbility", "An packet event.", false);
        ModuleCancelPackets.settingCPacketPlayerDigging = new ValueBoolean("CPacketPlayerDigging", "CPacketPlayerDigging", "An packet event.", false);
        ModuleCancelPackets.settingCPacketPlayerTryUseItem = new ValueBoolean("CPacketPlayerTryUseItem", "CPacketPlayerTryUseItem", "An packet event.", false);
        ModuleCancelPackets.settingCPacketPlayerTryUseItemOnBlock = new ValueBoolean("CPacketPlayerTryUseItemOnBlock", "CPacketPlayerTryUseItemOnBlock", "An packet event.", false);
        ModuleCancelPackets.settingCPacketRecipeInfo = new ValueBoolean("CPacketRecipeInfo", "CPacketRecipeInfo", "An packet event.", false);
        ModuleCancelPackets.settingCPacketResourcePackStatus = new ValueBoolean("CPacketResourcePackStatus", "CPacketResourcePackStatus", "An packet event.", false);
        ModuleCancelPackets.settingCPacketSeenAdvancements = new ValueBoolean("CPacketSeenAdvancements", "CPacketSeenAdvancements", "An packet event.", false);
        ModuleCancelPackets.settingCPacketPlayerPacket = new ValueBoolean("CPacketPlayerPacket", "CPacketPlayerPacket", "An packet event.", false);
        ModuleCancelPackets.settingCPacketSpectate = new ValueBoolean("CPacketSpectate", "CPacketSpectate", "An packet event.", false);
        ModuleCancelPackets.settingCPacketSteerBoat = new ValueBoolean("CPacketSteerBoat", "CPacketSteerBoat", "An packet event.", false);
        ModuleCancelPackets.settingCPacketTabComplete = new ValueBoolean("CPacketTabCompletion", "CPacketTabCompletion", "An packet event.", false);
        ModuleCancelPackets.settingCPacketUpdateSign = new ValueBoolean("CPacketUpdateSign", "CPacketUpdateSign", "An packet event.", false);
        ModuleCancelPackets.settingCPacketUseEntity = new ValueBoolean("CPacketUseEntity", "CPacketUseEntity", "An packet event.", false);
        ModuleCancelPackets.settingCPacketVehicleMove = new ValueBoolean("CPacketVehicleMove", "CPacketVehicleMove", "An packet event.", false);
    }
}
