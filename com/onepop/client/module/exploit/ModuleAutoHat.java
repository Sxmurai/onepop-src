//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\aesthetical\Documents\Development\Tools\Minecraft-Clients\1.12.2 mappings"!

// 
// Decompiled by Procyon v0.6-prerelease
// 

package com.onepop.client.module.exploit;

import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.ClickType;
import com.onepop.api.util.chat.ChatUtil;
import net.minecraft.init.Items;
import com.onepop.api.util.item.SlotUtil;
import com.onepop.api.ISLClass;
import com.onepop.api.util.client.NullUtil;
import com.onepop.client.event.client.ClientTickEvent;
import net.minecraft.item.ItemStack;
import com.onepop.api.setting.value.ValueEnum;
import com.onepop.api.module.impl.ModuleCategory;
import com.onepop.api.module.registry.Registry;
import com.onepop.api.module.Module;

@Registry(name = "Auto Hat", tag = "Auto-Hat", description = "Automatically glitch and dupes with command /hat plugin.", category = ModuleCategory.EXPLOIT)
public class ModuleAutoHat extends Module
{
    public static final int HELMET_SLOT_ID = 5;
    public static ValueEnum settingPostHatMode;
    private ItemStack currentItem;
    private Flag flag;
    
    public ModuleAutoHat() {
        this.flag = Flag.PRE;
    }
    
    @Listener
    public void onClientTickEvent(final ClientTickEvent event) {
        if (NullUtil.isPlayerWorld()) {
            return;
        }
        final ItemStack mainHandItemStack = ISLClass.mc.player.getHeldItemMainhand();
        final ItemStack helmetSlotItemStack = SlotUtil.getItemStack(5);
        if (this.flag == Flag.PRE) {
            if (helmetSlotItemStack.getItem() == Items.field_190931_a && mainHandItemStack.getItem() != Items.field_190931_a) {
                ChatUtil.message("/hat");
            }
            this.flag = Flag.POST;
        }
        if (this.flag == Flag.POST) {
            if (!SlotUtil.isAir(5)) {
                final ClickType k = (ModuleAutoHat.settingPostHatMode.getValue() == PostHatMode.MOVE_TO_INVENTORY) ? ClickType.QUICK_MOVE : ClickType.THROW;
                final int slot = SlotUtil.findFirstNotAirSlotFromInventory();
                if (k == ClickType.THROW || slot == -1) {
                    ISLClass.mc.playerController.windowClick(0, 5, 0, k, (EntityPlayer)ISLClass.mc.player);
                }
                else {
                    ISLClass.mc.playerController.windowClick(0, 5, 0, k, (EntityPlayer)ISLClass.mc.player);
                    ISLClass.mc.playerController.windowClick(0, slot, 0, k, (EntityPlayer)ISLClass.mc.player);
                    ISLClass.mc.playerController.windowClick(0, 5, 0, k, (EntityPlayer)ISLClass.mc.player);
                    ISLClass.mc.playerController.updateController();
                }
            }
            else {
                this.flag = Flag.PRE;
            }
        }
    }
    
    @Override
    public void onEnable() {
        this.flag = Flag.PRE;
    }
    
    @Override
    public void onDisable() {
        this.flag = Flag.PRE;
    }
    
    static {
        ModuleAutoHat.settingPostHatMode = new ValueEnum("Post Hat Mode", "PostHatMode", "Drop or move to inventory later /hat command.", PostHatMode.MOVE_TO_INVENTORY);
    }
    
    public enum PostHatMode
    {
        DROP, 
        MOVE_TO_INVENTORY;
    }
    
    public enum Flag
    {
        PRE, 
        POST;
    }
}
